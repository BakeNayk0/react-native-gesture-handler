"use strict";(self.webpackChunkreact_native_gesture_handler_docs=self.webpackChunkreact_native_gesture_handler_docs||[]).push([[8042],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(a),p=r,m=u["".concat(l,".").concat(p)]||u[p]||h[p]||i;return a?n.createElement(m,s(s({ref:t},d),{},{components:a})):n.createElement(m,s({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},4209:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=a(3117),r=(a(7294),a(3905));const i={id:"state-manager",title:"Gesture state manager",sidebar_label:"Gesture state manager",sidebar_position:15},s=void 0,o={unversionedId:"gestures/state-manager",id:"gestures/state-manager",title:"Gesture state manager",description:"GestureStateManager allows to manually control the state of the gestures. Please note that react-native-reanimated is required to use it, since it allows for synchronously executing methods in worklets.",source:"@site/docs/gestures/state-manager.md",sourceDirName:"gestures",slug:"/gestures/state-manager",permalink:"/react-native-gesture-handler/docs/gestures/state-manager",draft:!1,editUrl:"https://github.com/software-mansion/react-native-gesture-handler/edit/main/docs/docs/gestures/state-manager.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{id:"state-manager",title:"Gesture state manager",sidebar_label:"Gesture state manager",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Touch events",permalink:"/react-native-gesture-handler/docs/gestures/touch-events"},next:{title:"Components",permalink:"/react-native-gesture-handler/docs/category/components"}},l={},c=[{value:"Methods",id:"methods",level:2},{value:"<code>begin()</code>",id:"begin",level:3},{value:"<code>activate()</code>",id:"activate",level:3},{value:"<code>end()</code>",id:"end",level:3},{value:"<code>fail()</code>",id:"fail",level:3}],d={toc:c},u="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"GestureStateManager")," allows to manually control the state of the gestures. Please note that ",(0,r.kt)("inlineCode",{parentName:"p"},"react-native-reanimated")," is required to use it, since it allows for synchronously executing methods in worklets."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"begin"},(0,r.kt)("inlineCode",{parentName:"h3"},"begin()")),(0,r.kt)("p",null,"Transition the gesture to the ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/fundamentals/states-events#began"},(0,r.kt)("inlineCode",{parentName:"a"},"BEGAN"))," state. This method will have no effect if the gesture has already activated or finished."),(0,r.kt)("h3",{id:"activate"},(0,r.kt)("inlineCode",{parentName:"h3"},"activate()")),(0,r.kt)("p",null,"Transition the gesture to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/states-events#active"},(0,r.kt)("inlineCode",{parentName:"a"},"ACTIVE"))," state. This method will have no effect if the handler is already active, or has finished.\nIf the gesture is ",(0,r.kt)("a",{parentName:"p",href:"/docs/fundamentals/gesture-composition"},(0,r.kt)("inlineCode",{parentName:"a"},"exclusive"))," with another one, the activation will be delayed until the gesture with higher priority fails."),(0,r.kt)("h3",{id:"end"},(0,r.kt)("inlineCode",{parentName:"h3"},"end()")),(0,r.kt)("p",null,"Transition the gesture to the ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/fundamentals/states-events#end"},(0,r.kt)("inlineCode",{parentName:"a"},"END"))," state. This method will have no effect if the handler has already finished."),(0,r.kt)("h3",{id:"fail"},(0,r.kt)("inlineCode",{parentName:"h3"},"fail()")),(0,r.kt)("p",null,"Transition the gesture to the ",(0,r.kt)("a",{parentName:"p",href:"/react-native-gesture-handler/docs/fundamentals/states-events#failed"},(0,r.kt)("inlineCode",{parentName:"a"},"FAILED"))," state. This method will have no effect if the handler has already finished."))}h.isMDXComponent=!0}}]);